/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Enum Class

// Enum Class atau Enumeration merupakan salah satu fitur yang bisa kita gunakan untuk menyimpan kumpulan objek yang telah didefinisikan menjadi tipe data konstanta. Enumeration dapat ditetapkan sebagai nilai ke dalam sebuah variabel dengan cara yang lebih efisien. Selain itu, Enumeration juga dapat digunakan untuk meminimalisir kesalahan dalam pengetikan nilai sebuah variabel, misalnya:

/*
val colorRed = 0xFF0000
val colorGreen = 0x00FF00
val colorBlue = 0x0000FF
*/

enum class Color(val value: Int) {
    // RED(0xFF0000),
    // GREEN(0x00FF00),
    // BLUE(0x0000FF)

    RED(0xFF0000){
        override fun printValue() {
            println("value of RED is $value")
        }
    },
    GREEN(0x00FF00){
        override fun printValue() {
            println("value of GREEN is $value")
        }
    },
    BLUE(0x0000FF){
        override fun printValue() {
            println("value of BLUE is $value")
        }
    };
 
    abstract fun printValue()
}

// Untuk mendefinisikan sebuah kelas Enum, kita bisa menggunakan kata kunci enum dan setiap objek yang berada di dalamnya dipisahkan oleh karakter koma (,). Selain itu, objek yang berada di dalam Enum secara implisit bersifat static dan final sehingga kita tidak dapat mengubahnya setelah dideklarasikan. Berikut contoh implementasi yang paling mendasar dari sebuah Enum:

/*
enum class Color{
    RED, GREEN, BLUE
}

Objek yang telah didefinisikan menjadi tipe data Enum dapat mengakses attribute atau method di dalam kelas Enum itu sendiri. Konsep ini sama halnya seperti Array. Bedanya, Enum berbentuk constant. Berikut contoh ketika kita ingin mengakses objek yang berada di dalam kelas Enum:

val color : Color = Color.RED
print(color)
*/

fun main() {
    val colorRed = Color.RED
    val colorGreen = Color.GREEN
    val colorBlue = Color.BLUE

    println(colorRed)

    // Setiap enum class memiliki sebuah synthetic method yang memungkinkan kita mendapatkan daftar objek Enum dan nama dari tiap Enum itu sendiri.

    val colors: Array<Color> = Color.values()
    colors.forEach { color ->
        print("$color ")
    }

    // Perhatikan. Untuk mendapatkan daftar objek Enum kita bisa menggunakan fungsi values(). Sedangkan untuk mendapatkan nama dari objek Enum kita bisa menggunakan fungsi valueOf() seperti berikut:

    val color: Color = Color.valueOf("RED")
    println("Color is $color")
    println("Color value is ${color.value.toString(16)}")

    // Anda juga bisa mendapatkan property yang di dalam class Color seperti contoh value pada kode di atas dengan cara color.value. Khusus pada kasus di atas, kita menambahkan toString(16) untuk menampilkan angka yang berupa HexaDesimal.

    // Saat menggunakan fungsi valueOf() , perhatikan argumen yang kita masukkan ke dalam fungsi tersebut. Jika argumen yang kita masukan tidak sama dengan salah satu objek enum maka akan terjadi kesalahan IllegalArgumentException.

    // Apa itu IllegalArgumentException?
    // IllegalArgumentException adalah sebuah kondisi di mana saat ingin menggunakan sebuah fungsi, kita menyematkan argumen yang tidak sesuai ke dalam fungsi tersebut [4].

    // Selain menggunakan fungsi values() dan fungsi valueOf(), kita bisa mendapatkan daftar objek Enum dan nama dari objek Enum dengan cara yang lebih umum. Caranya, gunakan fungsi enumValues() dan fungsi enumValueOf(). Contoh penggunaan kedua fungsi tersebut adalah sebagai berikut:

    val colors1: Array<Color> = enumValues()
    colors1.forEach {color ->
        println(color)
    }

    val color1: Color = enumValueOf("RED")
    println("Color is $color1")


    /*
        output :
            RED
            GREEN
            BLUE
            Color is RED
    */


    // Konsep dari Enumeration sendiri sama seperti Array. Oleh karena itu, selain mendapatkan daftar dan nama dari tiap objek Enum, kita juga bisa mendapatkan posisi tiap objek menggunakan properti ordinal seperti berikut:

    val color2: Color = Color.GREEN

    println("Position GREEN is ${color2.ordinal}")

    /*
        output : Position GREEN is 1
    */

    // Di atas telah disebutkan bahwa setiap objek merupakan instance dari enum class yang kita definisikan. Lantas bagaimana cara kita mengecek instance dari Enum itu sendiri? Nah, untuk mengeceknya, gunakan When Expression seperti berikut:

    val color3: Color = Color.GREEN

    when(color3){
        Color.RED -> print("Color is Red")
        Color.BLUE -> print("Color is Blue")
        Color.GREEN -> print("Color is Green")
    }

    /*
        output : Color is Green
    */

    // Ketika menggunakan when untuk mengecek instance dari Enum, lebih baik masukkan setiap objek Enum yang kita definisikan. Jika kita melewatkan salah satu objek,  peringatan berikut akan muncul: â€˜when' expression on enum is recommended to be exhaustive
}