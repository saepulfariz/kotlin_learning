/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Inner Class

// Berbeda dengan Nested Class, penggunaan Inner Class memungkinkan kita untuk mengakses member (property dan method) dari outer class-nya.

class House {
    // Properti outer class
    val buildingArea = 100
    val totalRooms = 5

    inner class Room {
        // Properti atau anggota inner class
        val totalRooms = 4
        fun measureRoomArea() {
            // Inner class dapat mengakses properti pada outer class
            println(buildingArea/totalRooms)

            // Lalu, apa yang terjadi jika outer class dan inner class memiliki nama property yang sama. Pada dasarnya, jika Anda hanya memanggil nama property, Kotlin akan mengambil property dari inner class terlebih dahulu. Namun, apabila ingin mengambil property dari outer class, Anda bisa menggunakan qualified this.

            // Inner class dapat mengakses properti atau anggota outer class
            println(buildingArea/this@House.totalRooms)

        }
    }
}

fun main() {
    val house = House()
    val room = house.Room()
    room.measureRoomArea() 
}