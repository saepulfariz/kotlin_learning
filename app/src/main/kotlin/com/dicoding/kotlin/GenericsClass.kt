/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

interface List<P> {
    operator fun get(index: Int): P
}

class ArrayList<T> : List<T>{
    override fun get(index: Int): T {
        return this[index]
    }
}

fun main() {
    // Mendeklarasikan Kelas Generic
    // Setelah mengetahui cara kerja bekerja pada sebuah kelas, kita akan mempelajari cara penerapan generic itu sendiri. Kita bisa menerapkannya dengan meletakkan tipe parameter dalam angle brackets (<>) seperti interface generic berikut.

    /*
    interface List<T>{
        operator fun get(index: Int) : T
    }
    */

    // Pada kode di atas, tipe parameter T bisa kita gunakan sebagai tipe reguler yang mengembalikan tipe dari sebuah fungsi. Anda bisa mengatakannya sebagai place holder yang nantinya Anda dibebaskan untuk menentukan tipe dasar yang didukung oleh kode tersebut. 

    // Mari kita contohkan ketika kita mempunyai sebuah kelas yang mewarisi kelas atau interface generic. Di dalam kelas tersebut, Anda mempunyai sebuah method hasil dari pewarisan interface generic List<T>. Oleh karena itu, kita perlu menentukan tipe argumen sebagai tipe dasar dari parameter generic untuk kelas tersebut.

    /*
    class LongList : List<Long>{
        override fun get(index: Int): Long {
            return this[index]
        }
    }
    */

    // Pada kelas LongList di atas, Long digunakan sebagai tipe argumen untuk List sehingga fungsi get() menggunakan Long sebagai return tipe atau tipe data pengembalian dari fungsi tersebut. Lalu, bagaimana jika kita juga ingin membuat kelas LongList menjadi generic? Seperti halnya inteface generic, Anda juga perlu menambahkan kode generic untuk membuat kelas generic.

    /*
    class ArrayList<T> : List<T>{
        override fun get(index: Int): T {
            return this[index]
        }
    }
    */

    // Jika LongList menggunakan tipe data Long, berbeda dengan kelas ArrayList karena menggunakan tipe argumen generic <T>. Dengan demikian, kita perlu menentukan tipe argumen saat menggunakan kelas ArrayList. Contohnya seperti kode berikut.

    val longArrayList = ArrayList<Long>()
    val firstLong = longArrayList.get(0)

    // Yang perlu diperhatikan dari kelas ArrayList di atas adalah deklarasi dari tipe parameter T. Tipe parameter tersebut berbeda dengan parameter T dalam kelas List<T> karena T dalam ArrayList<T> adalah milik kelas ArrayList itu sendiri. Sebenarnya, Anda bisa menggunakan keyword selain T , misalnya seperti berikut.

    /*
    interface List<P> {
        operator fun get(index: Int): P
    }
    */
}