/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin


// public

class AnimalPublic(
    val name: String, 
    val weight: Double, 
    val age: Int, 
    val isMammal: Boolean
)


// private

class AnimalPrivate(
    private var name: String, 
    private var weight: Double, 
    private var age: Int, 
    private var isMammal: Boolean
){
    // atasi private setter getter
    fun getName() : String {
        return name
    }
    
    fun setName(newName: String) {
        this.name = newName
    }
}

// Protected

open class AnimalProtected(val name: String, protected val weight: Double)
 
class Cat(pName: String, pWeight: Double) : AnimalProtected(pName, pWeight)



// internal

internal class AnimalInternal(val name: String)

fun main() {
    // Dengan menentukan visibility modifiers atau hak akses tersebut, kita dapat membatasi akses data pada sebuah kelas, inilah yang disebut dengan encapsulation pada salah satu pilar OOP

    /*
    
    Public: Hak akses yang cakupannya paling luas. Anggota yang diberi modifier ini dapat diakses dari manapun.

    Private: Hak akses yang cakupannya paling terbatas. Anggota yang menerapkannya hanya dapat diakses pada scope yang sama.

    Protected: Hak akses yang cakupannya terbatas pada hirarki kelas. Anggota hanya dapat diakses pada kelas turunannya atau kelas itu sendiri.

    Internal: Hak akses yang cakupannya terbatas pada satu modul. Anggota yang menggunakannya tidak dapat diakses diluar dari modulnya tersebut.

    */
    val dicodingCat = AnimalPublic("Dicoding Miaw", 2.5, 2, true)
    println("Nama: ${dicodingCat.name}, Berat: ${dicodingCat.weight}, Umur: ${dicodingCat.age}, mamalia: ${dicodingCat.isMammal}")

    val dicodingCat1 = AnimalPrivate("Dicoding Miaw", 2.5, 2, true)
    // println("Nama: ${dicodingCat1.name}, Berat: ${dicodingCat1.weight}, Umur: ${dicodingCat1.age}, mamalia: ${dicodingCat1.isMammal}")

    println(dicodingCat1.getName())
    dicodingCat1.setName("Gooose")
    println(dicodingCat1.getName())


    val cat = Cat("Dicoding Miaw", 2.0)
    println("Nama Kucing: ${cat.name}")
    // println("Berat Kucing: ${cat.weight}") // error: expecting a top level declaration

    val dicodingCat2 = AnimalInternal("Name")
    println(dicodingCat2.name)

    // kelas Animal telah ditetapkan sebagai kelas internal, maka kelas tersebut hanya dapat diakses dari modul yang sama. Hak akses ini sangat berguna ketika kita mengembangkan sebuah aplikasi yang memiliki beberapa modul di dalamnya
}