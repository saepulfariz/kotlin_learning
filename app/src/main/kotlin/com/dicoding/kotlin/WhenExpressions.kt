/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

import java.util.Random

val random = Random()

// https://stackoverflow.com/questions/45685026/how-can-i-get-a-random-number-in-kotlin

fun main() {

    // When Expression,  yakni mekanisme yang memungkinkan nilai dari sebuah variabel/expression, mampu mengubah alur program.

    var value = 7

    // when akan mencocokan semua argumen yang berada di setiap branch secara berurutan sampai salah satu kondisi terpenuhi. Di dalam when kita juga bisa menambahkan branch else seperti berikut:

    value = 20
    
    when(value){
        6 -> println("value is 6")
        7 -> println("value is 7")
        8 -> println("value is 8")
        else -> println("value cannot be reached")
    }

    /*
        output: value is 7
    */

    // Sama halnya seperti if expression, when expression dapat mengembalikan nilai dan dapat disimpan di dalam sebuah variabel 

    value = 7
    var stringOfValue = when (value) {
        6 -> "value is 6"
        7 -> "value is 7"
        8 -> "value is 8"
        else -> "value cannot be reached"
    }

    println(stringOfValue)


    // Jika kita memiliki dua atau lebih baris kode yang akan kita jalankan di setiap branch, kita bisa memindahkannya ke dalam curly braces seperti berikut:

    value = 7
    stringOfValue = when (value) {
        6 -> {
            println("Six")
            "value is 6"
        }
        7 -> {
            println("Seven")
            "value is 7"
        }
        8 -> {
            println("Eight")
            "value is 8"
        }
        else -> {
            println("undefined")
            "value cannot be reached"
        }
    }

    println(stringOfValue)

    // when juga memungkinkan kita untuk memeriksa instance dengan tipe tertentu dari sebuah objek menggunakan is atau !is

    val anyType : Any = 100L
    when(anyType){
        is Long -> println("the value has a Long type")
        is String -> println("the value has a String type")
        else -> println("undefined")
    }


    // Selain itu, when expression juga bisa kita gunakan untuk memeriksa nilai yang terdapat pada sebuah Range atau Collection. Range sendiri merupakan salah satu tipe data yang unik di mana kita dapat menentukan nilai awal dan nilai akhir. 

    value =  27
    val ranges = 10..50

    when(value){
        in ranges -> println("value is in the range")
        !in ranges -> println("value is outside the range")
    }


    // Sejak Kotlin 1.3, kita dapat menangkap subjek dari when expression di dalam sebuah variabel. Contohnya seperti berikut

    val registerNumber = when(val regis = getRegisterNumber()){
        in 1..50 -> 50 * regis
        in 51..100 -> 100 * regis
        else -> regis
    }

    println(registerNumber)

    // Jika kita melihat penjelasan dan contoh penggunaan dari when expression di atas, ia memiliki kesamaan dengan if expression. Lantas disituasi seperti apa kita menggunakannya? if expression sebaiknya digunakan ketika kondisi yang diberikan tidak lebih dari 2 (dua) dan kondisi yang diberikan tidak terlalu rumit.

    if (anyType is Long){
        println("the value has a Long type")
    } else {
        println("the value is not Long type")
    }

    // Berbeda dengan when expression, ia bisa digunakan ketika kondisi yang diberikan lebih dari 2 (dua). 

    when (anyType) {
        is Long -> println("the value has a Long type")
        is Int -> println("the value has a Int type")
        is Double -> println("the value has a Double type")
        else -> println("undefined")
    }
}
fun getRegisterNumber() = random.nextInt(100)
