/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Interfaces
// Interfaces merupakan suatu konsep sifat umum yang nantinya digunakan oleh suatu kelas agar dapat memiliki sifat tersebut. Interface sangat mirip dengan abstract class, namun tanpa sebuah properti deklarasi dan fungsi yang dideklarasikan tanpa isi. Tujuan dari interface ini hanya untuk diimplementasikan oleh sebuah kelas. Kelas yang mengimplementasikan sebuah interface diharuskan melakukan override seluruh properti dan fungsi sekaligus mendefinisikan isi fungsi yang terdapat pada interfaces-nya.

// inisialisasi
/* 
interface IFly {
    fun fly()
}

*/

// implementasikan sebuah interface pada kelas, sama seperti kita melakukan extends pada sebuah super atau parent class.
/*
class Bird : IFly {
    
}
*/


interface IFly {
    fun fly()
    val numberOfWings: Int
}

// Overriding properti bisa dilakukan pada sebuah konstruktor kelas seperti berikut:

class Bird(override val numberOfWings: Int) : IFly {
 
    override fun fly() {
        if(numberOfWings > 0) println("Flying with $numberOfWings wings")
        else println("I'm Flying without wings")
    }
}


// Perbedaan Abstract Class dan Interface
// Walaupun sekilas mirip karena sama sama dapat digunakan untuk kontrak pewarisan dan tidak dapat diinisialisasi langsung menjadi object (harus diturunkan dulu), abstract class dan interface memiliki beberapa perbedaan.

abstract class Animal {	
    //default value not allowed
    abstract val age: Int //must be overridden
    
    //default value allowed
    open val isEating = true //optional to be overridden
    val isRespire = true //can not be overridden
}

interface IWalk {
    //default value not allowed
    val numberOfLeg: Int //must be overridden
    fun walk() 
    // must be overridden
}

interface IDrink {
}

class Camel : Animal(), IWalk, IDrink {
    override val age: Int = 7   // this property must exist, try to remove it
    override val isEating = true // this property optional, try to remove it
    override val numberOfLeg = 2 // this property must exist, try to remove it
    override fun walk() { // this method  must exist, try to remove it
        println("Camel can walk")
    }
}

fun main() {
    val camel = Camel()
    camel.walk()
}