/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

fun main() {
    // Set
    // Selanjutnya kita akan membahas objek turunan yang kedua, yaitu Set. Set merupakan sebuah collection yang hanya dapat menyimpan nilai yang unik. Ini akan berguna ketika Anda menginginkan tidak ada data yang sama atau duplikasi dalam sebuah collection. Kita bisa mendeklarasikan sebuah Set dengan fungsi setOf.

    val integerSet = setOf(1, 2, 4, 2, 1, 5)

    // Perhatikan kode di atas. Di sana terdapat beberapa angka yang duplikat, yaitu angka 1 dan 2. Silakan tampilkan pada konsol dan lihat hasilnya.

    println(integerSet)

    // Output: [1, 2, 4, 5]

    // Secara otomatis fungsi setOf akan membuang angka yang sama sehingga hasilnya adalah [1, 2, 4, 5]. Selain itu, urutan pada Set bukanlah sesuatu yang penting sehingga apabila kita bandingkan dua buah Set yang memiliki nilai yang sama dan urutan yang berbeda akan tetap dianggap sama.

    val setA = setOf(1, 2, 4, 2, 1, 5)
    val setB = setOf(1, 2, 4, 5)
    println(setA == setB)

    // Output: true

    // Kita juga dapat melakukan pengecekan apakah sebuah nilai ada di dalam Set dengan menggunakan kata kunci in.

    print(5 in setA)

    // Output: true

    // Kemudian ada juga fungsi union dan intersect untuk mengetahui gabungan dan irisan dari 2 (dua) buah Set. Berikut contohnya.

    val setC = setOf(1, 5, 7)
    val union = setA.union(setC)
    val intersect = setA.intersect(setC)

    println(union)
    println(intersect)

    // union: [1, 2, 4, 5, 7]
    // intersect: [1, 5]


    // Informasi Tambahan:

    // Pada Mutable Set kita bisa menambah dan menghapus item namun tak bisa mengubah nilai seperti pada List.

    val mutableSet = mutableSetOf(1, 2, 4, 2, 1, 5)
    //mutableSet[2] = 6 // tidak bisa mengubah mutableSet
    mutableSet.add(6) // menambah item di akhir set
    mutableSet.remove(1) //menghapus item yang memiliki nilai 1


    /*
    
    
    Berikut keterangan dari gambar di atas.

    Intersection
    Gunakanlah intersect untuk membuat sebuah set baru dengan nilai yang sama dari kedua set.

    Union
    Gunakanlah union untuk membuat sebuah set baru dengan mengambil semua data dari kedua set.

    Substracting
    Gunakanlah substract untuk membuat set baru dengan nilai-nilai yang tidak ada didalam set yang ditentukan.

    Symmetric Difference
    Berbeda dengan kasus di atas, di Kotlin tidak tersedia untuk mencari nilai symmetric difference. Anda perlu mencari secara manual nilai dalam semua set, tetapi untuk nilai yang sama tidak dimasukkan ke dalam set baru tersebut.

    */


    val numbers = setOf("one", "two", "three")
    val numbers2 = setOf("three", "four")

    // merge differences 
    println((numbers - numbers2) union (numbers2 - numbers))
    // [one, two, four]
}