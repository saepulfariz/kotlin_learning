/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin


// Property Delegation

// Pengelolaan properti kelas baik itu memberikan atau mengubah sebuah nilai dapat didelegasikan kepada kelas lain. Dengan ini kita dapat meminimalisir boilerplate dalam penulisan getter dan setter (jika properties menggunakan var) pada setiap kelas yang kita buat. Sebagai contoh, kita memiliki tiga buah kelas yang di dalamnya memiliki satu properti String. Jika kita ingin menerapkan getter dan setter pada setiap properti kelasnya, maka kita perlu menuliskan getter dan setter tersebut pada seluruh kelas. Hal tersebut dapat mengurangi efisiensi dalam menuliskan kode karena terlalu banyak kode yang harus kita tulis secara berulang. Solusinya, kita perlu membuat sebuah kelas yang memang bertugas untuk mengatur atau mengelola fungsi getter dan setter untuk sebuah properti kelas. Teknik tersebut pada Kotlin dinamakan Delegate.

import kotlin.reflect.KProperty
 
class DelegateName {
    private var value: String = "Default"
 
    operator fun getValue(classRef: Any?, property: KProperty<*>) : String {
        println("Fungsi ini sama seperti getter untuk properti ${property.name} pada class $classRef")
        return value
    }
 
    operator fun setValue(classRef: Any?, property: KProperty<*>, newValue: String){
        println("Fungsi ini sama seperti setter untuk properti ${property.name} pada class $classRef")
        println("Nilai ${property.name} dari: $value akan berubah menjadi $newValue")
        value = newValue
    }
}

// Pada contoh di atas, delegasi hanya dapat digunakan oleh properti yang memiliki tipe data String

class Animal {
    var name: String by DelegateName()
}
 
class Person {
    var name: String by DelegateName()
}
 
class Hero {
    var name: String by DelegateName()
}


//  kita juga dapat membuat sebuah delegasi kelas umum yang dapat digunakan oleh seluruh tipe data dengan memanfaatkan tipe data Any

class DelegateGenericClass {
    private var value: Any = "Default"
 
    operator fun getValue(classRef: Any, property: KProperty<*>): Any {
        println("Fungsi ini sama seperti getter untuk properti ${property.name} pada class $classRef")
        return value
    }
 
    operator fun setValue(classRef: Any, property: KProperty<*>, newValue: Any) {
        println("Nilai ${property.name} dari: $value akan berubah menjadi $newValue")
        value = newValue
    }
}

class Animal1 {
    var name: Any by DelegateGenericClass()
    var weight: Any by DelegateGenericClass()
    var age: Any by DelegateGenericClass()
}
 
fun main(){
    val animal = Animal()
    animal.name = "Dicoding Miaw"
    println("Nama Hewan: ${animal.name}")
 
    val person = Person()
    person.name = "Dimas"
    println("Nama Orang: ${person.name}")
 
    val hero = Hero()
    hero.name = "Gatotkaca"
    println("Nama Pahlawan: ${hero.name}")

    val animal1 = Animal1()
    animal1.name = "Dicoding cat"
    animal1.weight = 6.2
    animal1.age = 1
 
    println("Nama: ${animal1.name}")
    println("Berat: ${animal1.weight}")
    println("Umur: ${animal1.age} Tahun")
}