/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

fun main() {
    
    val listOfInt = listOf(1, 2, 3, null, 5, null, 7)
    for (i in listOfInt) {
        print(i)
    }

    /*
    output: 123null5null7
    */

    // menghasilkan null maka akan ada potensi NullPointerException

    println("\n===============")

    // Continue digunakan untuk melewatkan proses iterasi dan lanjut dengan proses iterasi berikutnya. Sementara itu, Break digunakan untuk menghentikan proses iterasi.

    val listOfInt2 = listOf(1, 2, 3, null, 5, null, 7)
 
    for (i in listOfInt2) {
        if (i == null) continue
        print(i)
    }

    /*
    output: 12357
    */

    // Pada kode di atas kita menggunakan kata kunci continue. Jika hasil evaluasi expression yang diberikan bernilai true, maka proses iterasi akan dilewatkan dan lanjut ke proses iterasi berikutnya.

    println("\n===============")

    val listOfInt3 = listOf(1, 2, 3, null, 5, null, 7)
 
    for (i in listOfInt3) {
        if (i == null) break
        print(i)
    }

    /*
    output: 123
    */

    // Penggunaan break pada kode di atas akan langsung menghentikan proses iterasi jika variabel i bernilai null.


    // Break dan Continue Labels

    // Pada Kotlin, sebuah expression dapat ditandai dengan sebuah label. Label pada Kotlin memiliki sebuah identifier yang diikuti dengan tanda @. Contoh dari sebuah label adalah foo@ atau bar@

    println("\n===============")

    loop@ for (i in 1..10) {
        println("Outside Loop")

        for (j in 1..10) {
            println("Inside Loop")
            if ( j > 5) break@loop
        }
    }

    // Pada kode diatas, break yang sudah ditandai dengan label akan dilompati ke titik awal proses perulangan yang sudah ditandai dengan label. break akan menghentikan proses perulangan terluar dari dalam proses perulangan, di mana break tersebut dipanggil.
}
