/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Companion Object

// Berbeda dengan class, Anda tidak dapat membuat inner object secara langsung di dalam class. Untuk mengatasinya, Anda perlu menambahkan Companion Object seperti berikut.

class Library {
    companion object{
        fun borrowBookById(id: Int) {
            println("Book with $id has been borrowed")
        }
    }
}

// Alhasil, Anda dapat memanggil fungsi yang di dalam Companion Object secara langsung dari kelas lain. Anda juga dapat menghapus penggunaan Companion seperti contoh pemanggilan kedua, yakni cukup Library.borrowBookById(21).

// Companion Object juga biasa digunakan dalam kasus penulisan konstanta. Konstanta adalah nilai tetap yang didefinisikan di awal ketika kompilasi dan tidak dapat diubah selama runtime. Dalam bahasa pemrograman lain, kita biasanya menggunakan static untuk mendefinisikannya. Namun, karena Kotlin tidak mengenal static, Anda bisa menggunakan keyword const val. Sayangnya, const val hanya bisa dideklarasikan di top level atau di dalam object. Di sinilah Companion Object berperan untuk mengatasinya.

class MyLibrary {
    // Const 'val' are only allowed on top level, in named objects, or in companion objects
    // const val LIBRARY_NAME = "Dicoding Library" 
    
    fun totalBook() {
        print("Total book in $LIBRARY_NAME is unlimited")
    }
    
    companion object{
        const val LIBRARY_NAME = "Dicoding Library" // OK
        // const val LIBRARY_NAME_A = LIBRARY_NAME.lowercase() // Const 'val' initializer should be a constant value
        val LIBRARY_NAME_B = LIBRARY_NAME.lowercase() // OK
    }
}

// Catatan:
// Perhatikan bahwa semua penamaan konstanta sebaiknya menggunakan huruf kapital sesuai konvensi. Selain itu, best-practice penempatan companion object juga sebaiknya diletakkan di bagian paling bawah dari class tersebut.

// Lalu, apa bedanya antara const val dengan val pada umumnya? 

// - Hal yang paling terlihat adalah kondisi ketika mendeklarasikannya. Val didefinisikan ketika runtime, sedangkan const val harus didefinisikan ketika compile time. Jadi, const val harus didefinisikan secara langsung, bukan dalam bentuk pemanggilan fungsi.

/*
const val LIBRARY_NAME = "Dicoding Library" // OK
const val LIBRARY_NAME_A = LIBRARY_NAME.lowercase() // Const 'val' initializer should be a constant value
val LIBRARY_NAME_B = LIBRARY_NAME.lowercase() // OK
*/

// - Kedua adalah lokasi ketika dideklarasikan. Val bisa Anda letakkan di mana saja, sedangkan const val hanya bisa dideklarasikan pada top level file atau berada dalam object. 

// - Const val dapat meningkatkan kinerja dengan menghilangkan komputasi ketika runtime, sedangkan val nilainya perlu dievaluasi ketika runtime.

fun main() {
    Library.Companion.borrowBookById(21)
    Library.borrowBookById(21)

    val name = MyLibrary.LIBRARY_NAME
    println(name)
}