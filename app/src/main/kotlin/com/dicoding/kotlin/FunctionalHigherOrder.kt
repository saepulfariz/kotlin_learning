/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin


// Higher-Order Function
// Dalam mendeklarasi lambda, khususnya jika ingin ditetapkan agar dapat mengembalikan nilai, terkadang kompiler tidak dapat menentukan tipenya. Alhasil, kita perlu menuliskannya secara eksplisit. Terdapat beberapa tipe deklarasi yang dapat kita gunakan untuk mendeklarasi lambda antara lain sebagai berikut.


// var sum: (Int) -> Int = { value -> value + value }


// Tipe deklarasi pada kode di atas adalah contoh ketika kita ingin membuat lambda yang memiliki 1 (satu) parameter bertipen data Int dengan tipe kembalian Int. Untuk tipe deklarasi lainnya, akan kita bahas pada submodul berikutnya.

// Dengan ditetapkannya tipe deklarasi pada fungsi tersebut, memungkinkan kita untuk bisa menggunakannya sebagai argumen untuk fungsi lainnya. Contohnya seperti berikut.

 
fun printResult(value: Int, sum: (Int) -> Int) {
    val result = sum(value)
    println(result)
}
 
var sum: (Int) -> Int = { value -> value + value }

fun main() {
    printResult(10 ,sum)

    /*
    output : 20
    */


    // Konsep ini dinamakan sebagai Higher-Order Function, yaitu sebuah fungsi yang menggunakan fungsi lainnya sebagai parameter, menjadikan tipe kembalian, ataupun keduanya.

    // Melanjutkan penulisan kode di atas, kita bisa juga melampirkan isi lambda secara langsung ketika fungsi printResult() di atas dipanggil seperti berikut.


    printResult(10, { value ->
        value + value
    })

    // Selanjutnya ada konvensi penulisan yang menarik di Kotlin, yakni apabila parameter terakhir pada sebuah fungsi berupa lambda, argumen tersebut dapat dituliskan di luar paranthesis seperti ini.

    printResult(10){ value ->
        value + value
    }

    // Sebelum 

    val message = { name: String ->
        "Hello $name"
    }
    
    fun printMessage(name: String, message: (String) -> String) {
        println(message(name))
    }

    printMessage("Dicoding", message)

    // sesudah

    fun printMessage1(name: String, message: (String) -> String) {
        println(message(name))
    }

    printMessage1("Dicoding") { name: String ->
        "Hello $name"
    }
}