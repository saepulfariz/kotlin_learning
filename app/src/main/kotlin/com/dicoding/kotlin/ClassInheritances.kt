/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Inheritances
// Dalam gambaran dunia nyata, banyak objek yang berbeda tetapi punya kesamaan atau kemiripan tertentu. Contohnya Kucing dan Kambing memiliki banyak kesamaan karena objek tersebut merupakan hewan. Kucing merupakan hewan mamalia, begitu juga dengan kambing. Mungkin yang membedakan objek tersebut adalah cara mereka mencari makanan dan jenis makanan yang dimakan. Sama halnya pada OOP, beberapa objek yang berbeda bisa saja memiliki kesamaan dalam hal tertentu. Di situlah konsep inheritance atau pewarisan yang merupakan salah satu pilar dari OOP harus diterapkan. Pewarisan dapat mencegah kita melakukan perulangan kode. 

/*
class ChildClass : ParentClass {
 
}
 */

 open class Animal(val name: String, val weight: Double, val age: Int, val isCarnivore: Boolean){
 
    open fun eat(){
        println("$name sedang makan!")
    }
 
    open fun sleep(){
        println("$name sedang tidur!")
    }
}

class Cat(pName: String, pWeight: Double, pAge: Int, pIsCarnivore: Boolean, val furColor: String, val numberOfFeet: Int)
    : Animal(pName, pWeight, pAge, pIsCarnivore) {
 
    fun playWithHuman() {
        println("$name bermain bersama Manusia !")
    }
 
    override fun eat(){
        super.eat()
        println("$name sedang memakan ikan !")
    }
 
    override fun sleep() {
        println("$name sedang tidur di bantal !")
    }
}

// jika Anda tidak ingin mengambil alih penuh, tetapi hanya ingin menambahkan implementasi dari yang sudah di parent class? Jawabannya adalah dengan menggunakan keyword super.

fun main() {
    val dicodingCat = Cat("Dicoding Miaw", 3.2, 2, true, "Brown", 4)
 
    dicodingCat.playWithHuman()
    dicodingCat.eat()
    dicodingCat.sleep()

}