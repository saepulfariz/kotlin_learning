/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

fun main() {
    // Scope Function with Lambda Argument
    // let
    // Fungsi let menggunakan argumen (it) untuk mengakses konteks dari sebuah objek. Penggunaan fungsi let akan banyak kita temukan pada objek yang bertipe nullable. Contohnya seperti di bawah ini:

    val message: String? = null
    message?.let {
        val length = it.length * 2
        val text = "text length $length"
        println(text)
    }


    // Dengan menggunakan fungsi let seperti pada kode di atas, kita bisa mengurangi penggunaan operator safe call seperti berikut:

    val message1: String? = null
    val length1 = message1?.length ?: 0 * 2
    val text1 = "text length $length1"
    println(text1)

    // Lalu bagaimana jika kita ingin menjalankan logika kode lain jika objeknya bernilai null? Di sini kita akan memanfaatkan fungsi lainnya yaitu run dan elvis operator yang sudah kita pelajari sebelumnya. Contohnya seperti berikut:

    val message2: String? = null
    message2?.let {
        val length2 = it.length * 2
        val text2 = "text length $length2"
        println(text2)
    } ?: run {
        val text2 = "message is null"
        println(text2)
    }

    // Sedangkan untuk nilai kembalian, ia bergantung pada expression yang berada di dalam blok lambda seperti pada contoh di atas. Karena pada baris terakhir dari blok lambda tersebut adalah fungsi println(), maka nilai yang akan dikembalikan adalah Unit. Ini dikarenakan fungsi println() sendiri mengembalikan nilai Unit.


    // also
    // Fungsi also sama seperti fungsi apply, di mana nilai yang dikembalikan adalah nilai dari konteks objek. Namun untuk konteks objeknya tersedia sebagai argumen (it). Fungsi also baiknya digunakan ketika kita ingin menggunakan konteks dari objek sebagai argumen tanpa harus mengubah nilainya. 


    val text3 = "Hello Kotlin"
    val result3 = text3.also {
        println("value length -> ${it.length}")
    }
 
    println("text -> $result3")

    /*
     output :
           value length -> 12
           text -> Hello Kotlin
    */

    // Nah untuk melihat bagaimana beberapa fungsi yang sudah kita bahas di atas , cek tautan ini.
}