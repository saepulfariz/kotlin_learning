/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

// Collections

// Setelah berkenalan dan mempelajari data class, selanjutnya kita akan mencoba untuk mempelajari collection. Bayangkan ketika kita ingin menyimpan dan memanipulasi sebuah objek. Kita perlu sebuah komponen yang mampu menambahkan, menghapus, mencari, bahkan mengurutkan sebuah data. Semua tugas itu bisa kita lakukan dengan bantuan collection. 

// Collections sendiri merupakan sebuah objek yang bisa menyimpan kumpulan objek lain termasuk data class. Dengan collection kita bisa menyimpan banyak data sekaligus. Di dalam collections terdapat beberapa objek turunan, di antaranya adalah List, Set, dan Map. Mari kita pelajari satu per satu objek turunan tersebut.

class User()

fun main() {

    // List

    // Yang pertama adalah List. Dengan List kita dapat menyimpan banyak data menjadi satu objek. Sebagai contoh, kita bisa membuat sebuah List yang berisi sekumpulan data angka, karakter atau yang lainnya. Yang menarik, sebuah List tidak hanya bisa menyimpan data dengan tipe yang sama. Namun juga bisa berisi bermacam - macam tipe data seperti Int, String, Boolean atau yang lainnya. Cara penulisannya pun sangat mudah. Perhatikan saja beberapa contoh kode berikut.

    val numberList : List<Int> = listOf(1, 2, 3, 4, 5)

    // Kode di atas adalah contoh dari satu objek List yang berisi kumpulan data dengan tipe Integer. Karena kompiler bisa mengetahui tipe data yang ada dalam sebuah objek List, maka tak perlu kita menuliskannya secara eksplisit. Ini tentunya akan menghemat kode yang kita ketikkan:

    val numberList1 = listOf(1, 2, 3, 4, 5)
    val charList = listOf('a', 'b', 'c')


    // Namun, untuk membuat List dengan tipe data yang berbeda, cukup masukkan saja data tersebut seperti kode berikut.

    val anyList = listOf('a', "Kotlin", 3, true)
    val anyList2 : List<Any> = listOf('a', "Kotlin", 3, true)

    // Karena setiap objek pada Kotlin merupakan turunan dari kelas Any, variabel anyList tersebut akan memiliki tipe data List<Any>. Jika kita tampilkan list di atas maka konsol akan menampilkan:
    // [a, Kotlin, 3, true]

    // Bahkan kita pun bisa memasukkan sebuah data class ke dalam List tersebut.

    val anyList3 = listOf('a', "Kotlin", 3, true, User())

    print(anyList[3])

    // println(anyList[5])

    // Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 5

    // MutableList

    // Sejauh ini kita baru belajar menginisialisasikan atau mengakses data dari sebuah List. Pastinya Anda bertanya, apakah bisa kita memanipulasi data pada List tersebut? Jawabannya tidak. Apa pasal? List tersebut bersifat immutable alias tidak bisa diubah. Namun jangan khawatir. Kotlin standard library juga menyediakan collection dengan tipe mutable. Artinya kita melakukan perubahan pada nilainya dengan cara seperti menambah, menghapus, atau mengganti nilai yang sudah ada. Caranya pun cukup mudah. Anda hanya perlu menggunakan fungsi mutableListOf seperti berikut:

    val anyList4 = mutableListOf('a', "Kotlin", 3, true, User())

    // Dengan begitu, anyList sekarang merupakan sebuah List yang bersifat mutable dan kita bisa memanipulasi data di dalamnya.

    anyList4.add('d') // menambah item di akhir list
    anyList4.add(1, "love") // menambah item pada indeks ke-1
    anyList4[3] = false // mengubah nilai item pada indeks ke-3 
    anyList4.removeAt(0) // menghapus item pada indeks ke-0

    println(anyList4)


    // Perbedaan Array dan List

    // Ingatkah Anda bahwa sebelumnya kita sudah belajar tentang Array. Lalu, apa perbedaan di antara keduanya? Untuk lebih jelasnya, mari perhatikan kode berikut ini.

    val array = arrayOf("Kotlin", "Java")
    array[0] = "Dart" // no error
    array.add("JavaScript") // error

    val list = listOf("Kotlin", "Java")
    list[0] = "Dart" // error
    list.add("JavaScript") //error

    val mutableList = mutableListOf("Kotlin", "Java")
    mutableList[0] = "Dart" // no error
    mutableList.add("JavaScript") // no error

    val arrayList = arrayListOf("Kotlin", "Java")
    arrayList[0] = "Dart" // no error
    arrayList.add("JavaScript") // no error


    /*
  
                             Array - List - MutableList - ArrayList
Mengubah konten	            - ✅	      ❌	        ✅          ✅
Menambah/menghapus konten	- ❌       ❌         ✅          ✅
    
    */

    // Seperti yang Anda lihat pada Array, lebarnya sudah tetap sehingga tidak dapat kita tambah atau hapus, sedangkan pada List, lebar dan nilai kontennya sudah tetap sehingga tidak dapat diubah-ubah. Jika Anda ingin mengubah isi konten maupun menambah/menghapus konten, gunakan MutableList atau ArrayList. ArrayList sebenarnya hanya abstraksi dari MutableList jadi keduanya memiliki sifat yang sama. 
}