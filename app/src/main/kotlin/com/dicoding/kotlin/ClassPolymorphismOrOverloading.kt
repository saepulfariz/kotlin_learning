/*
 * This source file was generated by the Gradle 'init' task
 */
package com.dicoding.kotlin

class Animal(private var name: String) {
    fun eat() {
        println("$name makan!")
    }
 
    fun eat(typeFood: String) {
        println("$name memakan $typeFood!")
    }
 
    fun eat(typeFood: String, quantity: Double) {
        println("$name memakan $typeFood sebanyak $quantity grams!")
    }
 
    fun sleep() {
        println("$name tidur!")
    }
}

class Calculator {
    fun add(value1: Int, value2: Int) = value1 + value2
    fun add(value1: Int, value2: Int, value3: Int) = value1 + value2 + value3
    fun add(value1: Double, value2: Double) = value1 + value2
    fun add(value1: Float, value2: Float) = value1 + value2
 
    fun min(value1: Int, value2: Int) = if (value1 < value2) value1 else value2
    fun min(value1: Double, value2: Double) = if (value1 < value2) value1 else value2
}

fun main() {
    // Polymorphism merupakan kemampuan objek, variabel, atau fungsi yang dapat memiliki berbagai bentuk.

    // Polymorphism dapat digambarkan seperti seorang yang menguasai dan mampu berbicara dalam beberapa bahasa. 

    // Dari sisi kode, polimorphism dapat diartikan sebagai sebuah nama fungsi yang dapat melakukan hal yang yang bermacam-macam

    // Overloading merupakan kondisi di mana kita bisa membuat 2 (dua) atau lebih fungsi yang memiliki jumlah, tipe, atau urutan parameter yang berbeda di dalam sebuah class.

    val dicodingCat = Animal("Dicoding Miaw")
 
    dicodingCat.eat()
    dicodingCat.eat("Ikan Tuna")
    dicodingCat.eat("Ikan Tuna", 450.0)

    val calc = Calculator()
 
    println(calc.add(2, 4))
    println(calc.add(2.5, 2.2))
    println(calc.add(6f, 7f))
    println(calc.add(1, 2, 3))
 
    println(calc.min(9, 2))
    println(calc.min(17.2, 18.3))
}